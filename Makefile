OS := $(shell uname -s | tr A-Z a-z)
ARCH := amd64

BIN := build/golang-boilerplate-bin
ENVS := CGO_ENABLED=0 GOOS=$(OS)
SWAGGER := ./swagger-cli

ifeq ($(OS), Windows_NT)
	OS := win32
	ifeq ($(PROCESSOR_ARCHITEW6432), AMD64)
		ARCH := amd64
	else
		ifeq ($(PROCESSOR_ARCHITECTURE), AMD64)
			ARCH := amd64
		endif
		ifeq ($(PROCESSOR_ARCHITECTURE), x86)
			ARCH := ia32
		endif
	endif
else 
    UNAME_P := $(shell uname -p)
    ifeq ($(UNAME_P),x86_64)
		ARCH := amd64
    endif
    ifneq ($(filter %86,$(UNAME_P)),)
		ARCH := ia32
    endif
    ifneq ($(filter arm%,$(UNAME_P)),)
		ARCH := arm64
    endif
endif

ifdef test_run
	TEST_ARGS := -run $(test_run)
endif

.PHONY: install
install-dep: swagger-install ## Install dependencies
	@command -v "dlv" >/dev/null 2>&1 || go install github.com/go-delve/delve/cmd/dlv@latest
	@command -v "mockgen" >/dev/null 2>&1 || go install go.uber.org/mock/mockgen@latest
	@$(MAKE) tidy

tidy:
	$(ENVS) go mod tidy -v

check-modd-exists:
	@modd --version > /dev/null

run-dev: check-modd-exists
	@modd -f ./.modd/server.modd.conf

migrate-up:
	go run main.go migrate --direction=up

migrate-down:
	go run main.go migrate --direction=down

.PHONY: mockgen
mockgen:
	@command -v "mockgen" >/dev/null 2>&1 || go install go.uber.org/mock/mockgen@latest

	# Remove existing mock directories
	@rm -rf pkg/stdlib/tests/mock
	@rm -rf internal/mocks/business/domain
	
	# mock pkg/stdlib
	@mockgen -destination=pkg/stdlib/tests/mock/cache/redis.go -package=mocks -source=pkg/stdlib/cache/redis.go Redis
	@mockgen -destination=pkg/stdlib/tests/mock/parser/parser.go -package=mocks -source=pkg/stdlib/parser/parser.go Parser
	@mockgen -destination=pkg/stdlib/tests/mock/parser/json.go -package=mocks -source=pkg/stdlib/parser/json.go JsonParser
	@mockgen -destination=pkg/stdlib/tests/mock/parser/validator.go -package=mocks -source=pkg/stdlib/parser/validator.go ValidatorParser
	@mockgen -destination=pkg/stdlib/tests/mock/httpclient/httpclient.go -package=mocks -source=pkg/stdlib/httpclient/httpclient.go HttpClient
	@mockgen -destination=pkg/stdlib/tests/mock/auth/auth.go -package=mocks -source=pkg/stdlib/auth/auth.go Auth
	
	# mock internal/business/domain
	
	# mock internal/business/usecase

swagger:
	@$(MAKE) swagger-concat
	@$(MAKE) swagger-server

swagger-concat:
	@echo "make swagger-concat"
	@rm -rf docs/api/tmp
	@mkdir -p docs/api/tmp
	@$(SWAGGER) mixin --output=docs/api/tmp/tmp.yaml --format=yaml --keep-spec-order \
		docs/api/configs/main.yaml docs/api/paths/*
	@$(SWAGGER) flatten docs/api/tmp/tmp.yaml --output=docs/api/swagger.yaml --format=yaml
	@$(SWAGGER) flatten docs/api/tmp/tmp.yaml --output=docs/api/swagger.json --format=json
	#@sed -i '1s@^@# Code generated by "make swagger"; DO NOT EDIT.\n@' docs/api/swagger.yaml
	@rm -f docs/api/tmp/tmp.yaml

swagger-server:
	@echo "make swagger-server"
	@rm -rf ./internal/types
	@$(SWAGGER) generate server \
		--allow-template-override \
		--template-dir=docs/api/configs/templates \
		--spec=docs/api/swagger.yaml \
		--server-package=internal/types \
		--model-package=internal/types \
		--config-file=docs/api/configs/go-swagger.yaml \
		--exclude-main
	@find internal/types -type f -exec grep -q '^// DELETE ME; DO NOT EDIT\.$$' {} \; -delete

swagger-install:
	@[ -e $(SWAGGER) ] ||  \
		wget "https://github.com/go-swagger/go-swagger/releases/download/v0.31.0/swagger_$(OS)_$(ARCH)" -O $(SWAGGER) && chmod +x $(SWAGGER)

lint:
	@mkdir -p ./test-reports
	@echo "Run linter..."
	@golangci-lint run --issues-exit-code 0 --timeout 10m --out-format checkstyle > ./test-reports/golangci-lint.out

format:
	@$(MAKE) fmt
	@$(MAKE) imports

fmt:
	@echo "Formatting code style..."
	gofmt -l -s -w \
		cmd/.. \
		internal/.. \
		pkg/..
	@echo "[DONE] Formatting code style..."

imports:
	@go install golang.org/x/tools/cmd/goimports@latest
	@echo "Formatting imports..."
	goimports -w -local bitbucket.com/efishery/efishery-crowdver-service \
		cmd/.. \
		internal/.. \
		pkg/..
	@echo "[DONE] Formatting imports..."

.PHONY: test
test:
	mkdir -p test-reports
	go test ./internal/business/... -coverprofile=test-reports/coverage.out
	go tool cover -func test-reports/coverage.out
	go tool cover -func test-reports/coverage.out -o test-reports/coverage.cov

test-html:
	@$(MAKE) test
	go tool cover -html=test-reports/coverage.out -o test-reports/coverage.html

.PHONY: docs
docs: mockgen swagger-server ## build docs

.PHONY: build
build: 
	@$(MAKE) tidy
	mkdir -p build/
	$(ENVS) go build -o $(BIN) main.go