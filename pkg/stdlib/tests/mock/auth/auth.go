// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/stdlib/auth/auth.go
//
// Generated by this command:
//
//	mockgen -destination=pkg/stdlib/tests/mock/auth/auth.go -package=mocks -source=pkg/stdlib/auth/auth.go Auth
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	model "github.com/ssentinull/dealls-dating-service/internal/business/model"
	auth "github.com/ssentinull/dealls-dating-service/pkg/stdlib/auth"
	gomock "go.uber.org/mock/gomock"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
	isgomock struct{}
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// ExtractJWTClaims mocks base method.
func (m *MockAuth) ExtractJWTClaims(tokenstring string) (*auth.JWTClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractJWTClaims", tokenstring)
	ret0, _ := ret[0].(*auth.JWTClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractJWTClaims indicates an expected call of ExtractJWTClaims.
func (mr *MockAuthMockRecorder) ExtractJWTClaims(tokenstring any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractJWTClaims", reflect.TypeOf((*MockAuth)(nil).ExtractJWTClaims), tokenstring)
}

// GenerateJWTToken mocks base method.
func (m *MockAuth) GenerateJWTToken(user model.UserModel) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateJWTToken", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateJWTToken indicates an expected call of GenerateJWTToken.
func (mr *MockAuthMockRecorder) GenerateJWTToken(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateJWTToken", reflect.TypeOf((*MockAuth)(nil).GenerateJWTToken), user)
}

// GetEmail mocks base method.
func (m *MockAuth) GetEmail(c *gin.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmail", c)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetEmail indicates an expected call of GetEmail.
func (mr *MockAuthMockRecorder) GetEmail(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmail", reflect.TypeOf((*MockAuth)(nil).GetEmail), c)
}

// GetID mocks base method.
func (m *MockAuth) GetID(c *gin.Context) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID", c)
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockAuthMockRecorder) GetID(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockAuth)(nil).GetID), c)
}

// GetJwtToken mocks base method.
func (m *MockAuth) GetJwtToken(c *gin.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJwtToken", c)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetJwtToken indicates an expected call of GetJwtToken.
func (mr *MockAuthMockRecorder) GetJwtToken(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJwtToken", reflect.TypeOf((*MockAuth)(nil).GetJwtToken), c)
}

// GetName mocks base method.
func (m *MockAuth) GetName(c *gin.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName", c)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockAuthMockRecorder) GetName(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockAuth)(nil).GetName), c)
}

// GetSignature mocks base method.
func (m *MockAuth) GetSignature(c *gin.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignature", c)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSignature indicates an expected call of GetSignature.
func (mr *MockAuthMockRecorder) GetSignature(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignature", reflect.TypeOf((*MockAuth)(nil).GetSignature), c)
}

// GetStaticToken mocks base method.
func (m *MockAuth) GetStaticToken() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStaticToken")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStaticToken indicates an expected call of GetStaticToken.
func (mr *MockAuthMockRecorder) GetStaticToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStaticToken", reflect.TypeOf((*MockAuth)(nil).GetStaticToken))
}

// ParseJWTToken mocks base method.
func (m *MockAuth) ParseJWTToken(tokenstring string) (*auth.JWTClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseJWTToken", tokenstring)
	ret0, _ := ret[0].(*auth.JWTClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseJWTToken indicates an expected call of ParseJWTToken.
func (mr *MockAuthMockRecorder) ParseJWTToken(tokenstring any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseJWTToken", reflect.TypeOf((*MockAuth)(nil).ParseJWTToken), tokenstring)
}

// ParseJWTTokenWithoutExpirationCheck mocks base method.
func (m *MockAuth) ParseJWTTokenWithoutExpirationCheck(tokenstring string) (*auth.JWTClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseJWTTokenWithoutExpirationCheck", tokenstring)
	ret0, _ := ret[0].(*auth.JWTClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseJWTTokenWithoutExpirationCheck indicates an expected call of ParseJWTTokenWithoutExpirationCheck.
func (mr *MockAuthMockRecorder) ParseJWTTokenWithoutExpirationCheck(tokenstring any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseJWTTokenWithoutExpirationCheck", reflect.TypeOf((*MockAuth)(nil).ParseJWTTokenWithoutExpirationCheck), tokenstring)
}
