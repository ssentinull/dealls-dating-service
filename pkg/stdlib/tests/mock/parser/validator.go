// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/stdlib/parser/validator.go
//
// Generated by this command:
//
//	mockgen -destination=pkg/stdlib/tests/mock/parser/validator.go -package=mocks -source=pkg/stdlib/parser/validator.go ValidatorParser
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	runtime "github.com/go-openapi/runtime"
	gomock "go.uber.org/mock/gomock"
)

// MockValidator is a mock of Validator interface.
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
	isgomock struct{}
}

// MockValidatorMockRecorder is the mock recorder for MockValidator.
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance.
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// BindAndValidateBody mocks base method.
func (m *MockValidator) BindAndValidateBody(c *gin.Context, val runtime.Validatable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindAndValidateBody", c, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindAndValidateBody indicates an expected call of BindAndValidateBody.
func (mr *MockValidatorMockRecorder) BindAndValidateBody(c, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindAndValidateBody", reflect.TypeOf((*MockValidator)(nil).BindAndValidateBody), c, val)
}

// BindOnly mocks base method.
func (m *MockValidator) BindOnly(c *gin.Context, val any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindOnly", c, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindOnly indicates an expected call of BindOnly.
func (mr *MockValidatorMockRecorder) BindOnly(c, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindOnly", reflect.TypeOf((*MockValidator)(nil).BindOnly), c, val)
}

// ValidateByBindingTag mocks base method.
func (m *MockValidator) ValidateByBindingTag(c context.Context, val any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateByBindingTag", c, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateByBindingTag indicates an expected call of ValidateByBindingTag.
func (mr *MockValidatorMockRecorder) ValidateByBindingTag(c, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateByBindingTag", reflect.TypeOf((*MockValidator)(nil).ValidateByBindingTag), c, val)
}

// MockBindable is a mock of Bindable interface.
type MockBindable struct {
	ctrl     *gomock.Controller
	recorder *MockBindableMockRecorder
	isgomock struct{}
}

// MockBindableMockRecorder is the mock recorder for MockBindable.
type MockBindableMockRecorder struct {
	mock *MockBindable
}

// NewMockBindable creates a new mock instance.
func NewMockBindable(ctrl *gomock.Controller) *MockBindable {
	mock := &MockBindable{ctrl: ctrl}
	mock.recorder = &MockBindableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBindable) EXPECT() *MockBindableMockRecorder {
	return m.recorder
}

// BindRequest mocks base method.
func (m *MockBindable) BindRequest(c *gin.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindRequest", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindRequest indicates an expected call of BindRequest.
func (mr *MockBindableMockRecorder) BindRequest(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindRequest", reflect.TypeOf((*MockBindable)(nil).BindRequest), c)
}
