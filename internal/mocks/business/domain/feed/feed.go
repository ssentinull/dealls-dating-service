// Code generated by MockGen. DO NOT EDIT.
// Source: internal/business/domain/feed/feed.go
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/business/domain/feed/feed.go -package=mocks -source=internal/business/domain/feed/feed.go DomainFeed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/ssentinull/dealls-dating-service/internal/business/model"
	types "github.com/ssentinull/dealls-dating-service/internal/types"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockDomainItf is a mock of DomainItf interface.
type MockDomainItf struct {
	ctrl     *gomock.Controller
	recorder *MockDomainItfMockRecorder
	isgomock struct{}
}

// MockDomainItfMockRecorder is the mock recorder for MockDomainItf.
type MockDomainItfMockRecorder struct {
	mock *MockDomainItf
}

// NewMockDomainItf creates a new mock instance.
func NewMockDomainItf(ctrl *gomock.Controller) *MockDomainItf {
	mock := &MockDomainItf{ctrl: ctrl}
	mock.recorder = &MockDomainItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainItf) EXPECT() *MockDomainItfMockRecorder {
	return m.recorder
}

// CreateMatch mocks base method.
func (m *MockDomainItf) CreateMatch(ctx context.Context, tx *gorm.DB, p model.MatchModel) (model.MatchModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMatch", ctx, tx, p)
	ret0, _ := ret[0].(model.MatchModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMatch indicates an expected call of CreateMatch.
func (mr *MockDomainItfMockRecorder) CreateMatch(ctx, tx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMatch", reflect.TypeOf((*MockDomainItf)(nil).CreateMatch), ctx, tx, p)
}

// CreatePreference mocks base method.
func (m *MockDomainItf) CreatePreference(ctx context.Context, tx *gorm.DB, p model.PreferenceModel) (model.PreferenceModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePreference", ctx, tx, p)
	ret0, _ := ret[0].(model.PreferenceModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePreference indicates an expected call of CreatePreference.
func (mr *MockDomainItfMockRecorder) CreatePreference(ctx, tx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePreference", reflect.TypeOf((*MockDomainItf)(nil).CreatePreference), ctx, tx, p)
}

// CreateSwipe mocks base method.
func (m *MockDomainItf) CreateSwipe(ctx context.Context, tx *gorm.DB, p model.SwipeModel) (model.SwipeModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSwipe", ctx, tx, p)
	ret0, _ := ret[0].(model.SwipeModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSwipe indicates an expected call of CreateSwipe.
func (mr *MockDomainItfMockRecorder) CreateSwipe(ctx, tx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSwipe", reflect.TypeOf((*MockDomainItf)(nil).CreateSwipe), ctx, tx, p)
}

// GetFeedByParams mocks base method.
func (m *MockDomainItf) GetFeedByParams(ctx context.Context, p model.GetFeedParams) ([]model.FeedModel, *types.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedByParams", ctx, p)
	ret0, _ := ret[0].([]model.FeedModel)
	ret1, _ := ret[1].(*types.Pagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFeedByParams indicates an expected call of GetFeedByParams.
func (mr *MockDomainItfMockRecorder) GetFeedByParams(ctx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedByParams", reflect.TypeOf((*MockDomainItf)(nil).GetFeedByParams), ctx, p)
}

// GetPreferenceByParams mocks base method.
func (m *MockDomainItf) GetPreferenceByParams(ctx context.Context, p model.GetPreferenceParams) (model.PreferenceModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreferenceByParams", ctx, p)
	ret0, _ := ret[0].(model.PreferenceModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreferenceByParams indicates an expected call of GetPreferenceByParams.
func (mr *MockDomainItfMockRecorder) GetPreferenceByParams(ctx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreferenceByParams", reflect.TypeOf((*MockDomainItf)(nil).GetPreferenceByParams), ctx, p)
}

// GetSwipeByParams mocks base method.
func (m *MockDomainItf) GetSwipeByParams(ctx context.Context, p model.GetSwipeParams) (model.SwipeModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwipeByParams", ctx, p)
	ret0, _ := ret[0].(model.SwipeModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwipeByParams indicates an expected call of GetSwipeByParams.
func (mr *MockDomainItfMockRecorder) GetSwipeByParams(ctx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwipeByParams", reflect.TypeOf((*MockDomainItf)(nil).GetSwipeByParams), ctx, p)
}

// GetSwipeCountByUserId mocks base method.
func (m *MockDomainItf) GetSwipeCountByUserId(ctx context.Context, userId int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwipeCountByUserId", ctx, userId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwipeCountByUserId indicates an expected call of GetSwipeCountByUserId.
func (mr *MockDomainItfMockRecorder) GetSwipeCountByUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwipeCountByUserId", reflect.TypeOf((*MockDomainItf)(nil).GetSwipeCountByUserId), ctx, userId)
}

// SetSwipeCountByUserId mocks base method.
func (m *MockDomainItf) SetSwipeCountByUserId(ctx context.Context, userId, swipeCount int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSwipeCountByUserId", ctx, userId, swipeCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSwipeCountByUserId indicates an expected call of SetSwipeCountByUserId.
func (mr *MockDomainItfMockRecorder) SetSwipeCountByUserId(ctx, userId, swipeCount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSwipeCountByUserId", reflect.TypeOf((*MockDomainItf)(nil).SetSwipeCountByUserId), ctx, userId, swipeCount)
}
