// Code generated by MockGen. DO NOT EDIT.
// Source: internal/business/domain/user/user.go
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/business/domain/user/user.go -package=mocks -source=internal/business/domain/user/user.go DomainUser
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/ssentinull/dealls-dating-service/internal/business/model"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockDomainItf is a mock of DomainItf interface.
type MockDomainItf struct {
	ctrl     *gomock.Controller
	recorder *MockDomainItfMockRecorder
	isgomock struct{}
}

// MockDomainItfMockRecorder is the mock recorder for MockDomainItf.
type MockDomainItfMockRecorder struct {
	mock *MockDomainItf
}

// NewMockDomainItf creates a new mock instance.
func NewMockDomainItf(ctrl *gomock.Controller) *MockDomainItf {
	mock := &MockDomainItf{ctrl: ctrl}
	mock.recorder = &MockDomainItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainItf) EXPECT() *MockDomainItfMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockDomainItf) CreateUser(ctx context.Context, tx *gorm.DB, p model.UserModel) (model.UserModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, tx, p)
	ret0, _ := ret[0].(model.UserModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDomainItfMockRecorder) CreateUser(ctx, tx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDomainItf)(nil).CreateUser), ctx, tx, p)
}

// GetUserByParams mocks base method.
func (m *MockDomainItf) GetUserByParams(ctx context.Context, p model.GetUserParams) (model.UserModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByParams", ctx, p)
	ret0, _ := ret[0].(model.UserModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByParams indicates an expected call of GetUserByParams.
func (mr *MockDomainItfMockRecorder) GetUserByParams(ctx, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByParams", reflect.TypeOf((*MockDomainItf)(nil).GetUserByParams), ctx, p)
}
