// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SwipeFeedRequest Swipe Feed Request
//
// swagger:model swipeFeedRequest
type SwipeFeedRequest struct {

	// swipe type
	SwipeType SwipeType `json:"swipe_type,omitempty"`

	// the To User Id
	ToUserID int64 `json:"to_user_id" binding:"required"`
}

// Validate validates this swipe feed request
func (m *SwipeFeedRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSwipeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwipeFeedRequest) validateSwipeType(formats strfmt.Registry) error {
	if swag.IsZero(m.SwipeType) { // not required
		return nil
	}

	if err := m.SwipeType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("swipe_type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("swipe_type")
		}
		return err
	}

	return nil
}

// ContextValidate validate this swipe feed request based on the context it is used
func (m *SwipeFeedRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSwipeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SwipeFeedRequest) contextValidateSwipeType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.SwipeType) { // not required
		return nil
	}

	if err := m.SwipeType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("swipe_type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("swipe_type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SwipeFeedRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SwipeFeedRequest) UnmarshalBinary(b []byte) error {
	var res SwipeFeedRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
