// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"

	"github.com/ssentinull/dealls-dating-service/internal/types"
)

// NewLoginUserParams creates a new LoginUserParams object
// no default values defined in spec.
func NewLoginUserParams() LoginUserParams {

	return LoginUserParams{}
}

// LoginUserParams contains all the bound params for the login user operation
// typically these are obtained from a http.Request
//
// swagger:parameters LoginUser
type LoginUserParams struct {
	/*X Client Id
	  Required: true
	  In: header
	*/
	XClientID string `header:"X-Client-Id"`
	/*
	  Required: true
	  In: body
	*/
	Body *types.LoginUserRequest
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewLoginUserParams() beforehand.
func (o *LoginUserParams) BindRequest(c *gin.Context) error {
	var res []error

	var r *http.Request

	r = c.Request

	if err := o.bindXClientID(r.Header[http.CanonicalHeaderKey("X-Client-Id")], true, strfmt.Default); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body types.LoginUserRequest
		if err := c.Bind(&body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("body", "body", ""))
			} else {
				res = append(res, errors.NewParseError("body", "body", "", err))
			}
		} else {
			// validate body object
			if err := body.Validate(strfmt.Default); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Body = &body
			}
		}
	} else {
		res = append(res, errors.Required("body", "body", ""))
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *LoginUserParams) Validate(formats strfmt.Registry) error {
	var res []error

	// X-Client-Id
	// Required: true

	if err := validate.Required("X-Client-Id", "header", o.XClientID); err != nil {
		res = append(res, err)
	}

	// body
	// Required: true

	// body is validated in endpoint
	//if err := o.Body.Validate(formats); err != nil {
	//  res = append(res, err)
	//}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindXClientID binds and validates parameter XClientID from header.
func (o *LoginUserParams) bindXClientID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("X-Client-Id", "header", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("X-Client-Id", "header", raw); err != nil {
		return err
	}

	o.XClientID = raw

	return nil
}
