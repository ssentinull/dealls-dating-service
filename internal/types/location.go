// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Location Location City
//
// swagger:model location
type Location string

func NewLocation(value Location) *Location {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Location.
func (m Location) Pointer() *Location {
	return &m
}

const (

	// LocationJAKARTA captures enum value "JAKARTA"
	LocationJAKARTA Location = "JAKARTA"

	// LocationPALEMBANG captures enum value "PALEMBANG"
	LocationPALEMBANG Location = "PALEMBANG"

	// LocationDENPASAR captures enum value "DENPASAR"
	LocationDENPASAR Location = "DENPASAR"
)

// for schema
var locationEnum []interface{}

func init() {
	var res []Location
	if err := json.Unmarshal([]byte(`["JAKARTA","PALEMBANG","DENPASAR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		locationEnum = append(locationEnum, v)
	}
}

func (m Location) validateLocationEnum(path, location string, value Location) error {
	if err := validate.EnumCase(path, location, value, locationEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this location
func (m Location) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLocationEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this location based on context it is used
func (m Location) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
