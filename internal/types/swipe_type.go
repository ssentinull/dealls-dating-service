// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SwipeType Swipe Type
//
// swagger:model swipeType
type SwipeType string

func NewSwipeType(value SwipeType) *SwipeType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SwipeType.
func (m SwipeType) Pointer() *SwipeType {
	return &m
}

const (

	// SwipeTypeRIGHT captures enum value "RIGHT"
	SwipeTypeRIGHT SwipeType = "RIGHT"

	// SwipeTypeLEFT captures enum value "LEFT"
	SwipeTypeLEFT SwipeType = "LEFT"
)

// for schema
var swipeTypeEnum []interface{}

func init() {
	var res []SwipeType
	if err := json.Unmarshal([]byte(`["RIGHT","LEFT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		swipeTypeEnum = append(swipeTypeEnum, v)
	}
}

func (m SwipeType) validateSwipeTypeEnum(path, location string, value SwipeType) error {
	if err := validate.EnumCase(path, location, value, swipeTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this swipe type
func (m SwipeType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSwipeTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this swipe type based on context it is used
func (m SwipeType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
